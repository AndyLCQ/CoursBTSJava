//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : WifiBot.java
//  @ Date : 09/04/2013
//  @ Author : 
//
//



package tpwifibot;

import java.io.IOException;
import java.io.PrintStream;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.logging.Level;
import java.util.logging.Logger;

public class WifiBot {
	private Socket socketRobot = null;
	private PrintStream streamOutRobot;
	private Point position=new Point();
	private double orientation=0;
	private Sens sens;
	private Vitesse vitesse;
        private char[] commandeWifiBot = new char [2];
	public WifiBot()
        {
//            connexionRobot();
     	}
	
	public void connexionRobot()
        {
        try 
        {
            int port = 15000;
//            String host = "192.168.0.132";
//            socketRobot = new Socket(host, port);
//            streamOutRobot = new PrintStream(socketRobot.getOutputStream());
            System.out.println("Connexion avec WifiBot reussie ");
        }
        catch (UnknownHostException ex) {
            System.out.println("Impossible de joindre l'adresse IP du robot ");
        }
        catch (IOException ex) {
           System.out.println("Erreur Entrées/Sorties connexion :" +ex.getMessage());
        }
        }
	
	public void deconnexionRobot()
        {
        try{
//            streamOutRobot.close();
//            socketRobot.close();
        }catch(Exception e1){
        System.out.println("Erreur à  la deconnexion : "+e1.getMessage()) ;}
        }
	
	private void envoyerCommande (byte commandeMG, byte commandeMD)
        {
         commandeWifiBot[0] =(char)commandeMG;
         commandeWifiBot[1]= (char)commandeMD;
//        streamOutRobot.print(commandeWifiBot);
        }
	
	private void temporisation(float seconde) 
        {
        try
        {
            Thread.sleep((long)seconde * 1000);
        } catch (InterruptedException ex)
        {
            Logger.getLogger(WifiBot.class.getName()).log(Level.SEVERE, null, ex);
        }
	}
	
	public void avancer(Vitesse vitesse, float durée)
        {
            byte commandeMoteurWifiBot = (byte) (vitesse.toByte()+ sens.SENS_AV.toByte());
            envoyerCommande(commandeMoteurWifiBot, commandeMoteurWifiBot);
            temporisation(durée);
            arreter();
	}
	
	public void tournerQuartGauche() 
        {
            float durée = (float)1.4;
            byte commandeMoteurWifiBotGauche = (byte) (vitesse.V4.toByte()+ sens.SENS_AR.toByte());
            byte commandeMoteurWifiBotDroite = (byte) (vitesse.V4.toByte()+ sens.SENS_AV.toByte());
            envoyerCommande(commandeMoteurWifiBotGauche, commandeMoteurWifiBotDroite);
            orientation+=Math.PI/2;
            orientation=orientation%360;
            temporisation(durée);
             position.affiche();
             System.out.println(orientation);
            arreter();
	}
	
	public void tournerQuartDroit() 
        {
            float durée = (float)1.4;
            byte commandeMoteurWifiBotGauche = (byte) (vitesse.V4.toByte()+ sens.SENS_AV.toByte());
            byte commandeMoteurWifiBotDroite = (byte) (vitesse.V4.toByte()+ sens.SENS_AR.toByte());
            envoyerCommande(commandeMoteurWifiBotGauche, commandeMoteurWifiBotDroite);
            
            orientation-=Math.PI/2;
            orientation=orientation%360;
            
            temporisation(durée);
             position.affiche();
             System.out.println(orientation);
            arreter();
	}
	
	public void reculerSansDetecteurs(Vitesse vitesse, float durée) 
        {
            byte commandeMoteurWifiBot = (byte) (vitesse.toByte()+ sens.SENS_AR.toByte());
            envoyerCommande(commandeMoteurWifiBot, commandeMoteurWifiBot);
            temporisation(durée);
            
            arreter();
	}
	
	public void reculerAvecDetecteurs(Vitesse vitesse, float durée) 
        {
            tournerQuartGauche();
            tournerQuartGauche();
            avancer(vitesse, durée);
            tournerQuartGauche();
            tournerQuartGauche();
	}
	
	public void arreter() 
        {
            byte commandeMoteurWifiBot = (byte) (vitesse.V0.toByte()+ sens.SENS_AV.toByte());
            envoyerCommande(commandeMoteurWifiBot, commandeMoteurWifiBot);
            
	}
	
	public void carré(byte taille) 
        {
            for (int i = 0; i < 4; i++)
            {
                for (int j = 0; j < taille; j++)
                {
                    avancer1Unité();
                    
                }
            tournerQuartDroit(); 
        
            }
            
            
	}
	
	public void avancer1Unité()
        {
           double dY,dX;
           double orientationconvertie;
           orientationconvertie= (orientation*Math.PI)/180;
           dY = Math.sin(orientationconvertie);
           dX = Math.cos(orientationconvertie);
           position.translate((short)dX,(short) dY);
           avancer(vitesse.V1, 1);
           position.affiche();
            System.out.println(orientationconvertie);
           arreter(); 
	}
	
	public boolean allerPosition(Point destination) 
        {
            
            return false;
	
	}
}
